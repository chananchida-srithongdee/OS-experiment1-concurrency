Experiment #1

i =100 ; 

Thread 2 ได้ถูกเลือกโดย scheduler ให้ได้ทำงานก่อนโดยจะวนจนครบ100 ครั้งตามลำดับจาก0ไปยัง 99 

ทั้ง 2 Thread สามารถวนจนครบลูปได้ 100 ครั้ง ภายในช่วง 1 timeslot ที่มันได้ โดยเมื่อ Thread# 2 ทำงานจนครบแล้ว มันได้ทำ voluntary context switch เพื่อทำการคืนเวลาที่เหลือกลับสู่ระบบ เพื่อให้ Thread อื่นได้เข้ามาทำงานต่อ



i =1000;

เมื่อจำนวนครั้งในการวนลูปของแต่ละThread เพิ่มขึ้นเป็น1000 ทำให้แต่ละ Thread ไม่สามารถทำงานจนวนครบ1000ครั้งภายใน 1 Timeslotเหมือนแบบตอนวนแค่100ครั้งได้ ทำให้เมื่อแต่ละThread ทำงานจนครบTimeslotที่มันได้ ถึงแม้จะยังทำงานไม่เสร็จ มันก็ต้องจำเป็นต้องทำcontext switch กลับมา เพราะต้องให้Thread อื่นได้ทำงานบ้าง โดยจะสังเกตได้ว่าบางทีแต่ละ  Thread ก็ทำงานได้ไม่เท่าไรก็ต้อง switch กลับไปให้อีกThread ทำงาน ทั้งนี้้ทั้งนั้น เป็นหน้าที่ของscheduler ในการจัดการตรงนี้ ว่าใครจะได้ทำก่อนทำหลัง หรือ ได้Timeslot น้อยหรือมาก

Experiment #2 :  resource sharing among threads

เนื่องจากว่าใน1 process , Thread แต่ละตัว สามารถที่จะshare resource ร่วมกันกับ process ได้ 

โดยมันสามารถที่จะใช้global variable ในการแชร์ค่าระหว่างกัน

ในcode จะมีThread 2 อัน โดยมันสามารถที่จะอ่านค่าจาก resource ได้ทั้งคู่

result:

Thread# 2 i=10000

Thread# 1 i=10000



Experiment #3: pause a thread

เป็นการใช้คำสั่ง pause(การหยุดพัก) ในการสั่งให้Thread หยุดรออะไรสักอย่าง

ในที่นี้ใช้เป็น  Thread.Sleep( t ) t คือเวลาที่จะให้หยุดรอ มีหน่วยเป็น  ms.

e.g. Thread.Sleep(10)  //main Thread จะหยุดการประมวลผลไป 10 มิลลิวินาที

result:

เมื่อไม่ได้ทำการpause เลย; 

resource=10000

เมื่อ t=10 ms. และ 100 ms.
resource=55555

จะได้ว่าหากเราไม่สั่งให้mainThread ทำการรอจนกว่าฟังก์ชั่นTestThread1 ใน Thread th1 ทำงานเสร็จก่อน มันจะreturn ค่าresourceเดิม ที่อยู่ใน Global Variable ออกมา ซึ่งก็คือ 10000 

แต่หากเราสั่งให้main threadรอจนกว่า Thread th1 ทำงานจนเสร็จ ค่า resource จะกลายเป็น 55555 จากการทำงานของฟังก์ชัน TestThread1



Experiment3.1:  pause a thread #2

result: 

เมื่อทำการ run code ก่อนที่จะทำการแก้ไข ( pause เพียง 10 ms.)ค่า resource ที่แสดงออกมาไม่ได้ผลลัพธ์ที่คาดหวัง เนื่องจากThread th1ยังทำงานไม่เสร็จ เราจึงต้องทำการสั่งให้ main thread ทำการรอจนกว่า thread th1 ทำงานจนเสร็จก่อน โดยการปรับค่าเวลาที่จะให้ main thread pause มากขึ้น โดยการแก้argument  ของฟังก์ชัน Sleep ให้มีค่ามากขึ้น



หลังจากแก้ค่า argument ของฟังก์ชัน Sleep เป็น 2305 ms. (เป็นค่าที่น้อยที่สุดเท่าที่เป็นไปได้)

 Thread th1 จึงจะทำงานเสร็จ (resource กลายเป็น 55555)


Experiment # 3.2:  join thread

result: ได้ผลลัพธ์ที่คาดหวังคือ resource=55555 ตรงจุดที่เราต้องการ โดยที่ไม่ต้องใช้คำสั่งThread.Sleep( ) เลย

เนื่องจาก  ฟังก์ชัน th1.Join() มันจะทำการสั่งให้main thread ทำการรอจนกว่าthread th1 ทำงานของมันจนเสร็จ ( ค่า resource กลายเป็น  55555) จนswitchกลับมาที่main Thread เพื่อทำการrun คำสั่ง 

Console.WriteLine("resource={0}", resource);
แสดงค่าออกมาให้เราเห็น